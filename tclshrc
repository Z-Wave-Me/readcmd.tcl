# To change settings go to bottom

proc cmd_loop {} {
	set cmds_hist ""
	set cmds ""
	set is_running 1
	global hist_fname
	global prompt
	global sandbox

	set cmds_hist [cmd_hist_load $hist_fname]
	set cmds [dict create _acl_hdlr ::autocomp]

	set term_prms_orig [readcmd::term_set_raw]
	set term_prms_raw [readcmd::term_get_prms]

	while {$is_running} {
		set cmd [readcmd::read_sync $readcmd::kbindings $prompt "exit" $cmds_hist $cmds]
		puts ""
		if {($cmd ne "") && ($cmd ne "exit")} {
			lappend cmds_hist $cmd
		}
		if {$cmd eq "exit"} {
			set is_running 0
		} else {
			readcmd::term_set_prms $term_prms_orig
			if {[catch {$sandbox eval $cmd} res]} {
				puts $::errorInfo
			} else {
				if {$res ne ""} {
					puts $res
				}
			}
			readcmd::term_set_prms $term_prms_raw
		}

	}

	readcmd::term_unset_raw $term_prms_orig

	cmd_hist_save $cmds_hist $hist_fname
}

proc cmd_hist_save {hist fname} {
	global hist_size
	set cnt [llength $hist]

	set i [expr {$cnt - $hist_size}]
	if {$i < 0} {
		set i 0
	}
	set fh [open $fname w]
	for {} {$i < $cnt} {incr i} {
		puts $fh [cmd_hist_entry_escape [lindex $hist $i]]
	}
	close $fh
}

proc cmd_hist_load {fname} {
	set hist [list]

	try {
		set fh [open $fname r]
	} trap {POSIX ENOENT} {} {
		return $hist
	}
	while {[gets $fh line] >= 0} {
		lappend hist [cmd_hist_entry_unescape $line]
	}
	close $fh

	return $hist
}

proc cmd_hist_entry_escape {entry} {
	return [string map {% %% \n \\n \\ \\\\} $entry]
}

proc cmd_hist_entry_unescape {entry} {
	return [string map {%% % \\n \n \\\\ \\} $entry]
}

proc autocomp {prms wtc} {
	set ret [dict create]
	set state 0
	global sandbox

	if {0} {
	if {[llength $prms] == 0} {
		foreach i [$sandbox eval {info commands}] {
			dict set ret $i ""
		}
		foreach i [$sandbox eval {namespace children}] {
			dict set ret $i ""
		}
	}
	}

	set idx [string length $wtc]
	incr idx -1
	for {} {($idx >= 0) && ($state < 100)} {incr idx -1} {
		switch [string index $wtc $idx] {
		"$" {
			set state 100
			break
		}
		}
	}

	switch $state {
	100 {
		foreach i [$sandbox eval "info vars [string range $wtc ${idx}+1 end]*"] {
			dict set ret [string range $wtc 0 $idx]$i ""
		}
	}
	}

	return $ret
}

######################################################################
# MAIN
######################################################################
if {$::tcl_interactive} {
	set hist_fname "~/.tclsh_history"
	set hist_size 1000
	set prompt "\x1b\[01;34mTCL>\x1b\[0m "

	lappend auto_path ~/work/libs/tcl
	package require readcmd

	set sandbox [interp create]

	cmd_loop
	exit
}